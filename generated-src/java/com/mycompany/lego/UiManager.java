// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lego.djinni

package com.mycompany.lego;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class UiManager {
    public abstract void start();

    public abstract void stop();

    public abstract void updateTitle(String newTitle);

    public abstract void updateFirstName(String firstName);

    public abstract void updateLastName(String lastName);

    public abstract void timeStringUpdated(String timeString);

    public abstract void getTimeString();

    public abstract void getTimeStringAsync();

    public static native UiManager create(UiObserver observer, UiPlatformSupport platform);

    private static final class CppProxy extends UiManager
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void start()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_start(this.nativeRef);
        }
        private native void native_start(long _nativeRef);

        @Override
        public void stop()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stop(this.nativeRef);
        }
        private native void native_stop(long _nativeRef);

        @Override
        public void updateTitle(String newTitle)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_updateTitle(this.nativeRef, newTitle);
        }
        private native void native_updateTitle(long _nativeRef, String newTitle);

        @Override
        public void updateFirstName(String firstName)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_updateFirstName(this.nativeRef, firstName);
        }
        private native void native_updateFirstName(long _nativeRef, String firstName);

        @Override
        public void updateLastName(String lastName)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_updateLastName(this.nativeRef, lastName);
        }
        private native void native_updateLastName(long _nativeRef, String lastName);

        @Override
        public void timeStringUpdated(String timeString)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_timeStringUpdated(this.nativeRef, timeString);
        }
        private native void native_timeStringUpdated(long _nativeRef, String timeString);

        @Override
        public void getTimeString()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getTimeString(this.nativeRef);
        }
        private native void native_getTimeString(long _nativeRef);

        @Override
        public void getTimeStringAsync()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getTimeStringAsync(this.nativeRef);
        }
        private native void native_getTimeStringAsync(long _nativeRef);
    }
}
