// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lego.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Lego.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LegoRoot

@implementation LegoRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - LegoRoot_FileDescriptor

static GPBFileDescriptor *LegoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"lego"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GetRequest

@implementation GetRequest

@dynamic flag;

typedef struct GetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *flag;
} GetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = GetRequest_FieldNumber_Flag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetRequest__storage_, flag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRequest class]
                                     rootClass:[LegoRoot class]
                                          file:LegoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LegoRecordField

@implementation LegoRecordField

@dynamic id_p;
@dynamic name;
@dynamic data_p;

typedef struct LegoRecordField__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *data_p;
} LegoRecordField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = LegoRecordField_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LegoRecordField__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LegoRecordField_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LegoRecordField__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = LegoRecordField_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LegoRecordField__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LegoRecordField class]
                                     rootClass:[LegoRoot class]
                                          file:LegoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LegoRecordField__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LegoRecordSection

@implementation LegoRecordSection

@dynamic id_p;
@dynamic name;
@dynamic fieldsArray, fieldsArray_Count;

typedef struct LegoRecordSection__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSMutableArray *fieldsArray;
} LegoRecordSection__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = LegoRecordSection_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LegoRecordSection__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LegoRecordSection_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LegoRecordSection__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fieldsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LegoRecordField),
        .number = LegoRecordSection_FieldNumber_FieldsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LegoRecordSection__storage_, fieldsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LegoRecordSection class]
                                     rootClass:[LegoRoot class]
                                          file:LegoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LegoRecordSection__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LegoRecord

@implementation LegoRecord

@dynamic id_p;
@dynamic name;
@dynamic sectionsArray, sectionsArray_Count;

typedef struct LegoRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSMutableArray *sectionsArray;
} LegoRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = LegoRecord_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LegoRecord__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LegoRecord_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LegoRecord__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sectionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LegoRecordSection),
        .number = LegoRecord_FieldNumber_SectionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LegoRecord__storage_, sectionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LegoRecord class]
                                     rootClass:[LegoRoot class]
                                          file:LegoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LegoRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LegoResponse

@implementation LegoResponse

@dynamic success;

typedef struct LegoResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t success;
} LegoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = LegoResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LegoResponse__storage_, success),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LegoResponse class]
                                     rootClass:[LegoRoot class]
                                          file:LegoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LegoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Question

@implementation Question

@dynamic id_p;
@dynamic title;
@dynamic responseType;
@dynamic description_p;
@dynamic order;

typedef struct Question__storage_ {
  uint32_t _has_storage_[1];
  int32_t responseType;
  int32_t order;
  NSString *id_p;
  NSString *title;
  NSString *description_p;
} Question__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Question_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Question__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = Question_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Question__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "responseType",
        .dataTypeSpecific.className = NULL,
        .number = Question_FieldNumber_ResponseType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Question__storage_, responseType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Question_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Question__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "order",
        .dataTypeSpecific.className = NULL,
        .number = Question_FieldNumber_Order,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Question__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Question class]
                                     rootClass:[LegoRoot class]
                                          file:LegoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Question__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Page

@implementation Page

@dynamic id_p;
@dynamic title;
@dynamic order;
@dynamic questionsArray, questionsArray_Count;

typedef struct Page__storage_ {
  uint32_t _has_storage_[1];
  int32_t order;
  NSString *id_p;
  NSString *title;
  NSMutableArray *questionsArray;
} Page__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Page_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Page__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = Page_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Page__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "order",
        .dataTypeSpecific.className = NULL,
        .number = Page_FieldNumber_Order,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Page__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "questionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Question),
        .number = Page_FieldNumber_QuestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Page__storage_, questionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Page class]
                                     rootClass:[LegoRoot class]
                                          file:LegoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Page__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Template

@implementation Template

@dynamic id_p;
@dynamic name;
@dynamic pagesArray, pagesArray_Count;

typedef struct Template__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSMutableArray *pagesArray;
} Template__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Template_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Template__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Template_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Template__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Page),
        .number = Template_FieldNumber_PagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Template__storage_, pagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Template class]
                                     rootClass:[LegoRoot class]
                                          file:LegoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Template__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
