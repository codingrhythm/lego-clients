// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lego.proto

#ifndef PROTOBUF_lego_2eproto__INCLUDED
#define PROTOBUF_lego_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lego {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lego_2eproto();
void protobuf_AssignDesc_lego_2eproto();
void protobuf_ShutdownFile_lego_2eproto();

class GetRequest;
class LegoRecordField;
class LegoRecordSection;
class LegoRecord;
class LegoResponse;
class Question;
class Page;
class Template;

// ===================================================================

class GetRequest : public ::google::protobuf::Message {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  GetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline const ::std::string& flag() const;
  inline void set_flag(const ::std::string& value);
  inline void set_flag(const char* value);
  inline void set_flag(const char* value, size_t size);
  inline ::std::string* mutable_flag();
  inline ::std::string* release_flag();
  inline void set_allocated_flag(::std::string* flag);

  // @@protoc_insertion_point(class_scope:lego.GetRequest)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* flag_;
  friend void  protobuf_AddDesc_lego_2eproto();
  friend void protobuf_AssignDesc_lego_2eproto();
  friend void protobuf_ShutdownFile_lego_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class LegoRecordField : public ::google::protobuf::Message {
 public:
  LegoRecordField();
  virtual ~LegoRecordField();

  LegoRecordField(const LegoRecordField& from);

  inline LegoRecordField& operator=(const LegoRecordField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LegoRecordField& default_instance();

  void Swap(LegoRecordField* other);

  // implements Message ----------------------------------------------

  LegoRecordField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegoRecordField& from);
  void MergeFrom(const LegoRecordField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:lego.LegoRecordField)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_lego_2eproto();
  friend void protobuf_AssignDesc_lego_2eproto();
  friend void protobuf_ShutdownFile_lego_2eproto();

  void InitAsDefaultInstance();
  static LegoRecordField* default_instance_;
};
// -------------------------------------------------------------------

class LegoRecordSection : public ::google::protobuf::Message {
 public:
  LegoRecordSection();
  virtual ~LegoRecordSection();

  LegoRecordSection(const LegoRecordSection& from);

  inline LegoRecordSection& operator=(const LegoRecordSection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LegoRecordSection& default_instance();

  void Swap(LegoRecordSection* other);

  // implements Message ----------------------------------------------

  LegoRecordSection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegoRecordSection& from);
  void MergeFrom(const LegoRecordSection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .lego.LegoRecordField fields = 3;
  inline int fields_size() const;
  inline void clear_fields();
  static const int kFieldsFieldNumber = 3;
  inline const ::lego::LegoRecordField& fields(int index) const;
  inline ::lego::LegoRecordField* mutable_fields(int index);
  inline ::lego::LegoRecordField* add_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField >&
      fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:lego.LegoRecordSection)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField > fields_;
  friend void  protobuf_AddDesc_lego_2eproto();
  friend void protobuf_AssignDesc_lego_2eproto();
  friend void protobuf_ShutdownFile_lego_2eproto();

  void InitAsDefaultInstance();
  static LegoRecordSection* default_instance_;
};
// -------------------------------------------------------------------

class LegoRecord : public ::google::protobuf::Message {
 public:
  LegoRecord();
  virtual ~LegoRecord();

  LegoRecord(const LegoRecord& from);

  inline LegoRecord& operator=(const LegoRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LegoRecord& default_instance();

  void Swap(LegoRecord* other);

  // implements Message ----------------------------------------------

  LegoRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegoRecord& from);
  void MergeFrom(const LegoRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .lego.LegoRecordSection sections = 3;
  inline int sections_size() const;
  inline void clear_sections();
  static const int kSectionsFieldNumber = 3;
  inline const ::lego::LegoRecordSection& sections(int index) const;
  inline ::lego::LegoRecordSection* mutable_sections(int index);
  inline ::lego::LegoRecordSection* add_sections();
  inline const ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection >&
      sections() const;
  inline ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection >*
      mutable_sections();

  // @@protoc_insertion_point(class_scope:lego.LegoRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection > sections_;
  friend void  protobuf_AddDesc_lego_2eproto();
  friend void protobuf_AssignDesc_lego_2eproto();
  friend void protobuf_ShutdownFile_lego_2eproto();

  void InitAsDefaultInstance();
  static LegoRecord* default_instance_;
};
// -------------------------------------------------------------------

class LegoResponse : public ::google::protobuf::Message {
 public:
  LegoResponse();
  virtual ~LegoResponse();

  LegoResponse(const LegoResponse& from);

  inline LegoResponse& operator=(const LegoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LegoResponse& default_instance();

  void Swap(LegoResponse* other);

  // implements Message ----------------------------------------------

  LegoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegoResponse& from);
  void MergeFrom(const LegoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lego.LegoResponse)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 success_;
  friend void  protobuf_AddDesc_lego_2eproto();
  friend void protobuf_AssignDesc_lego_2eproto();
  friend void protobuf_ShutdownFile_lego_2eproto();

  void InitAsDefaultInstance();
  static LegoResponse* default_instance_;
};
// -------------------------------------------------------------------

class Question : public ::google::protobuf::Message {
 public:
  Question();
  virtual ~Question();

  Question(const Question& from);

  inline Question& operator=(const Question& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Question& default_instance();

  void Swap(Question* other);

  // implements Message ----------------------------------------------

  Question* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Question& from);
  void MergeFrom(const Question& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required int32 response_type = 3;
  inline bool has_response_type() const;
  inline void clear_response_type();
  static const int kResponseTypeFieldNumber = 3;
  inline ::google::protobuf::int32 response_type() const;
  inline void set_response_type(::google::protobuf::int32 value);

  // required string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // required int32 order = 5;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 5;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lego.Question)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_response_type();
  inline void clear_has_response_type();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_order();
  inline void clear_has_order();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* title_;
  ::std::string* description_;
  ::google::protobuf::int32 response_type_;
  ::google::protobuf::int32 order_;
  friend void  protobuf_AddDesc_lego_2eproto();
  friend void protobuf_AssignDesc_lego_2eproto();
  friend void protobuf_ShutdownFile_lego_2eproto();

  void InitAsDefaultInstance();
  static Question* default_instance_;
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  void Swap(Page* other);

  // implements Message ----------------------------------------------

  Page* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required int32 order = 3;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 3;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // repeated .lego.Question questions = 4;
  inline int questions_size() const;
  inline void clear_questions();
  static const int kQuestionsFieldNumber = 4;
  inline const ::lego::Question& questions(int index) const;
  inline ::lego::Question* mutable_questions(int index);
  inline ::lego::Question* add_questions();
  inline const ::google::protobuf::RepeatedPtrField< ::lego::Question >&
      questions() const;
  inline ::google::protobuf::RepeatedPtrField< ::lego::Question >*
      mutable_questions();

  // @@protoc_insertion_point(class_scope:lego.Page)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_order();
  inline void clear_has_order();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* title_;
  ::google::protobuf::RepeatedPtrField< ::lego::Question > questions_;
  ::google::protobuf::int32 order_;
  friend void  protobuf_AddDesc_lego_2eproto();
  friend void protobuf_AssignDesc_lego_2eproto();
  friend void protobuf_ShutdownFile_lego_2eproto();

  void InitAsDefaultInstance();
  static Page* default_instance_;
};
// -------------------------------------------------------------------

class Template : public ::google::protobuf::Message {
 public:
  Template();
  virtual ~Template();

  Template(const Template& from);

  inline Template& operator=(const Template& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Template& default_instance();

  void Swap(Template* other);

  // implements Message ----------------------------------------------

  Template* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Template& from);
  void MergeFrom(const Template& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .lego.Page pages = 3;
  inline int pages_size() const;
  inline void clear_pages();
  static const int kPagesFieldNumber = 3;
  inline const ::lego::Page& pages(int index) const;
  inline ::lego::Page* mutable_pages(int index);
  inline ::lego::Page* add_pages();
  inline const ::google::protobuf::RepeatedPtrField< ::lego::Page >&
      pages() const;
  inline ::google::protobuf::RepeatedPtrField< ::lego::Page >*
      mutable_pages();

  // @@protoc_insertion_point(class_scope:lego.Template)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::lego::Page > pages_;
  friend void  protobuf_AddDesc_lego_2eproto();
  friend void protobuf_AssignDesc_lego_2eproto();
  friend void protobuf_ShutdownFile_lego_2eproto();

  void InitAsDefaultInstance();
  static Template* default_instance_;
};
// ===================================================================


// ===================================================================

// GetRequest

// required string flag = 1;
inline bool GetRequest::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRequest::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRequest::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRequest::clear_flag() {
  if (flag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_->clear();
  }
  clear_has_flag();
}
inline const ::std::string& GetRequest::flag() const {
  // @@protoc_insertion_point(field_get:lego.GetRequest.flag)
  return *flag_;
}
inline void GetRequest::set_flag(const ::std::string& value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
  // @@protoc_insertion_point(field_set:lego.GetRequest.flag)
}
inline void GetRequest::set_flag(const char* value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.GetRequest.flag)
}
inline void GetRequest::set_flag(const char* value, size_t size) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_ = new ::std::string;
  }
  flag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.GetRequest.flag)
}
inline ::std::string* GetRequest::mutable_flag() {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.GetRequest.flag)
  return flag_;
}
inline ::std::string* GetRequest::release_flag() {
  clear_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = flag_;
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetRequest::set_allocated_flag(::std::string* flag) {
  if (flag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flag_;
  }
  if (flag) {
    set_has_flag();
    flag_ = flag;
  } else {
    clear_has_flag();
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.GetRequest.flag)
}

// -------------------------------------------------------------------

// LegoRecordField

// required string id = 1;
inline bool LegoRecordField::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LegoRecordField::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LegoRecordField::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LegoRecordField::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& LegoRecordField::id() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordField.id)
  return *id_;
}
inline void LegoRecordField::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordField.id)
}
inline void LegoRecordField::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordField.id)
}
inline void LegoRecordField::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordField.id)
}
inline ::std::string* LegoRecordField::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordField.id)
  return id_;
}
inline ::std::string* LegoRecordField::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LegoRecordField::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordField.id)
}

// required string name = 2;
inline bool LegoRecordField::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LegoRecordField::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LegoRecordField::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LegoRecordField::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LegoRecordField::name() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordField.name)
  return *name_;
}
inline void LegoRecordField::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordField.name)
}
inline void LegoRecordField::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordField.name)
}
inline void LegoRecordField::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordField.name)
}
inline ::std::string* LegoRecordField::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordField.name)
  return name_;
}
inline ::std::string* LegoRecordField::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LegoRecordField::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordField.name)
}

// required string data = 3;
inline bool LegoRecordField::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LegoRecordField::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LegoRecordField::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LegoRecordField::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& LegoRecordField::data() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordField.data)
  return *data_;
}
inline void LegoRecordField::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordField.data)
}
inline void LegoRecordField::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordField.data)
}
inline void LegoRecordField::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordField.data)
}
inline ::std::string* LegoRecordField::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordField.data)
  return data_;
}
inline ::std::string* LegoRecordField::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LegoRecordField::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordField.data)
}

// -------------------------------------------------------------------

// LegoRecordSection

// required string id = 1;
inline bool LegoRecordSection::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LegoRecordSection::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LegoRecordSection::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LegoRecordSection::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& LegoRecordSection::id() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordSection.id)
  return *id_;
}
inline void LegoRecordSection::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordSection.id)
}
inline void LegoRecordSection::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordSection.id)
}
inline void LegoRecordSection::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordSection.id)
}
inline ::std::string* LegoRecordSection::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordSection.id)
  return id_;
}
inline ::std::string* LegoRecordSection::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LegoRecordSection::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordSection.id)
}

// required string name = 2;
inline bool LegoRecordSection::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LegoRecordSection::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LegoRecordSection::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LegoRecordSection::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LegoRecordSection::name() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordSection.name)
  return *name_;
}
inline void LegoRecordSection::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordSection.name)
}
inline void LegoRecordSection::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordSection.name)
}
inline void LegoRecordSection::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordSection.name)
}
inline ::std::string* LegoRecordSection::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordSection.name)
  return name_;
}
inline ::std::string* LegoRecordSection::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LegoRecordSection::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordSection.name)
}

// repeated .lego.LegoRecordField fields = 3;
inline int LegoRecordSection::fields_size() const {
  return fields_.size();
}
inline void LegoRecordSection::clear_fields() {
  fields_.Clear();
}
inline const ::lego::LegoRecordField& LegoRecordSection::fields(int index) const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordSection.fields)
  return fields_.Get(index);
}
inline ::lego::LegoRecordField* LegoRecordSection::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordSection.fields)
  return fields_.Mutable(index);
}
inline ::lego::LegoRecordField* LegoRecordSection::add_fields() {
  // @@protoc_insertion_point(field_add:lego.LegoRecordSection.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField >&
LegoRecordSection::fields() const {
  // @@protoc_insertion_point(field_list:lego.LegoRecordSection.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField >*
LegoRecordSection::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:lego.LegoRecordSection.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// LegoRecord

// required string id = 1;
inline bool LegoRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LegoRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LegoRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LegoRecord::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& LegoRecord::id() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecord.id)
  return *id_;
}
inline void LegoRecord::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:lego.LegoRecord.id)
}
inline void LegoRecord::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.LegoRecord.id)
}
inline void LegoRecord::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecord.id)
}
inline ::std::string* LegoRecord::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.LegoRecord.id)
  return id_;
}
inline ::std::string* LegoRecord::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LegoRecord::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecord.id)
}

// required string name = 2;
inline bool LegoRecord::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LegoRecord::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LegoRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LegoRecord::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LegoRecord::name() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecord.name)
  return *name_;
}
inline void LegoRecord::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lego.LegoRecord.name)
}
inline void LegoRecord::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.LegoRecord.name)
}
inline void LegoRecord::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecord.name)
}
inline ::std::string* LegoRecord::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.LegoRecord.name)
  return name_;
}
inline ::std::string* LegoRecord::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LegoRecord::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecord.name)
}

// repeated .lego.LegoRecordSection sections = 3;
inline int LegoRecord::sections_size() const {
  return sections_.size();
}
inline void LegoRecord::clear_sections() {
  sections_.Clear();
}
inline const ::lego::LegoRecordSection& LegoRecord::sections(int index) const {
  // @@protoc_insertion_point(field_get:lego.LegoRecord.sections)
  return sections_.Get(index);
}
inline ::lego::LegoRecordSection* LegoRecord::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:lego.LegoRecord.sections)
  return sections_.Mutable(index);
}
inline ::lego::LegoRecordSection* LegoRecord::add_sections() {
  // @@protoc_insertion_point(field_add:lego.LegoRecord.sections)
  return sections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection >&
LegoRecord::sections() const {
  // @@protoc_insertion_point(field_list:lego.LegoRecord.sections)
  return sections_;
}
inline ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection >*
LegoRecord::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:lego.LegoRecord.sections)
  return &sections_;
}

// -------------------------------------------------------------------

// LegoResponse

// required int32 success = 1;
inline bool LegoResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LegoResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LegoResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LegoResponse::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 LegoResponse::success() const {
  // @@protoc_insertion_point(field_get:lego.LegoResponse.success)
  return success_;
}
inline void LegoResponse::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:lego.LegoResponse.success)
}

// -------------------------------------------------------------------

// Question

// required string id = 1;
inline bool Question::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Question::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Question::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Question::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Question::id() const {
  // @@protoc_insertion_point(field_get:lego.Question.id)
  return *id_;
}
inline void Question::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:lego.Question.id)
}
inline void Question::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.Question.id)
}
inline void Question::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.Question.id)
}
inline ::std::string* Question::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.Question.id)
  return id_;
}
inline ::std::string* Question::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Question::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.Question.id)
}

// required string title = 2;
inline bool Question::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Question::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Question::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Question::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Question::title() const {
  // @@protoc_insertion_point(field_get:lego.Question.title)
  return *title_;
}
inline void Question::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:lego.Question.title)
}
inline void Question::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.Question.title)
}
inline void Question::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.Question.title)
}
inline ::std::string* Question::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.Question.title)
  return title_;
}
inline ::std::string* Question::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Question::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.Question.title)
}

// required int32 response_type = 3;
inline bool Question::has_response_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Question::set_has_response_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Question::clear_has_response_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Question::clear_response_type() {
  response_type_ = 0;
  clear_has_response_type();
}
inline ::google::protobuf::int32 Question::response_type() const {
  // @@protoc_insertion_point(field_get:lego.Question.response_type)
  return response_type_;
}
inline void Question::set_response_type(::google::protobuf::int32 value) {
  set_has_response_type();
  response_type_ = value;
  // @@protoc_insertion_point(field_set:lego.Question.response_type)
}

// required string description = 4;
inline bool Question::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Question::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Question::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Question::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Question::description() const {
  // @@protoc_insertion_point(field_get:lego.Question.description)
  return *description_;
}
inline void Question::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:lego.Question.description)
}
inline void Question::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.Question.description)
}
inline void Question::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.Question.description)
}
inline ::std::string* Question::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.Question.description)
  return description_;
}
inline ::std::string* Question::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Question::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.Question.description)
}

// required int32 order = 5;
inline bool Question::has_order() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Question::set_has_order() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Question::clear_has_order() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Question::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 Question::order() const {
  // @@protoc_insertion_point(field_get:lego.Question.order)
  return order_;
}
inline void Question::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:lego.Question.order)
}

// -------------------------------------------------------------------

// Page

// required string id = 1;
inline bool Page::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Page::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Page::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Page::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Page::id() const {
  // @@protoc_insertion_point(field_get:lego.Page.id)
  return *id_;
}
inline void Page::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:lego.Page.id)
}
inline void Page::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.Page.id)
}
inline void Page::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.Page.id)
}
inline ::std::string* Page::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.Page.id)
  return id_;
}
inline ::std::string* Page::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Page::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.Page.id)
}

// required string title = 2;
inline bool Page::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Page::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Page::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Page::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Page::title() const {
  // @@protoc_insertion_point(field_get:lego.Page.title)
  return *title_;
}
inline void Page::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:lego.Page.title)
}
inline void Page::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.Page.title)
}
inline void Page::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.Page.title)
}
inline ::std::string* Page::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.Page.title)
  return title_;
}
inline ::std::string* Page::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Page::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.Page.title)
}

// required int32 order = 3;
inline bool Page::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Page::set_has_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Page::clear_has_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Page::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 Page::order() const {
  // @@protoc_insertion_point(field_get:lego.Page.order)
  return order_;
}
inline void Page::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:lego.Page.order)
}

// repeated .lego.Question questions = 4;
inline int Page::questions_size() const {
  return questions_.size();
}
inline void Page::clear_questions() {
  questions_.Clear();
}
inline const ::lego::Question& Page::questions(int index) const {
  // @@protoc_insertion_point(field_get:lego.Page.questions)
  return questions_.Get(index);
}
inline ::lego::Question* Page::mutable_questions(int index) {
  // @@protoc_insertion_point(field_mutable:lego.Page.questions)
  return questions_.Mutable(index);
}
inline ::lego::Question* Page::add_questions() {
  // @@protoc_insertion_point(field_add:lego.Page.questions)
  return questions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::Question >&
Page::questions() const {
  // @@protoc_insertion_point(field_list:lego.Page.questions)
  return questions_;
}
inline ::google::protobuf::RepeatedPtrField< ::lego::Question >*
Page::mutable_questions() {
  // @@protoc_insertion_point(field_mutable_list:lego.Page.questions)
  return &questions_;
}

// -------------------------------------------------------------------

// Template

// required string id = 1;
inline bool Template::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Template::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Template::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Template::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Template::id() const {
  // @@protoc_insertion_point(field_get:lego.Template.id)
  return *id_;
}
inline void Template::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:lego.Template.id)
}
inline void Template::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.Template.id)
}
inline void Template::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.Template.id)
}
inline ::std::string* Template::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.Template.id)
  return id_;
}
inline ::std::string* Template::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Template::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.Template.id)
}

// required string name = 2;
inline bool Template::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Template::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Template::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Template::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Template::name() const {
  // @@protoc_insertion_point(field_get:lego.Template.name)
  return *name_;
}
inline void Template::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lego.Template.name)
}
inline void Template::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lego.Template.name)
}
inline void Template::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lego.Template.name)
}
inline ::std::string* Template::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lego.Template.name)
  return name_;
}
inline ::std::string* Template::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Template::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lego.Template.name)
}

// repeated .lego.Page pages = 3;
inline int Template::pages_size() const {
  return pages_.size();
}
inline void Template::clear_pages() {
  pages_.Clear();
}
inline const ::lego::Page& Template::pages(int index) const {
  // @@protoc_insertion_point(field_get:lego.Template.pages)
  return pages_.Get(index);
}
inline ::lego::Page* Template::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:lego.Template.pages)
  return pages_.Mutable(index);
}
inline ::lego::Page* Template::add_pages() {
  // @@protoc_insertion_point(field_add:lego.Template.pages)
  return pages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::Page >&
Template::pages() const {
  // @@protoc_insertion_point(field_list:lego.Template.pages)
  return pages_;
}
inline ::google::protobuf::RepeatedPtrField< ::lego::Page >*
Template::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:lego.Template.pages)
  return &pages_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lego

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lego_2eproto__INCLUDED
