// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PEOPLE_UISTORAGE_H_
#define FLATBUFFERS_GENERATED_PEOPLE_UISTORAGE_H_

#include "flatbuffers/flatbuffers.h"

namespace UIStorage {

struct PeopleRecord;

struct PeopleRecord FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FIRST_NAME = 4,
    VT_LAST_NAME = 6
  };
  const flatbuffers::String *first_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FIRST_NAME);
  }
  const flatbuffers::String *last_name() const {
    return GetPointer<const flatbuffers::String *>(VT_LAST_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FIRST_NAME) &&
           verifier.Verify(first_name()) &&
           VerifyOffset(verifier, VT_LAST_NAME) &&
           verifier.Verify(last_name()) &&
           verifier.EndTable();
  }
};

struct PeopleRecordBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_first_name(flatbuffers::Offset<flatbuffers::String> first_name) {
    fbb_.AddOffset(PeopleRecord::VT_FIRST_NAME, first_name);
  }
  void add_last_name(flatbuffers::Offset<flatbuffers::String> last_name) {
    fbb_.AddOffset(PeopleRecord::VT_LAST_NAME, last_name);
  }
  explicit PeopleRecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PeopleRecordBuilder &operator=(const PeopleRecordBuilder &);
  flatbuffers::Offset<PeopleRecord> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PeopleRecord>(end);
    return o;
  }
};

inline flatbuffers::Offset<PeopleRecord> CreatePeopleRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> first_name = 0,
    flatbuffers::Offset<flatbuffers::String> last_name = 0) {
  PeopleRecordBuilder builder_(_fbb);
  builder_.add_last_name(last_name);
  builder_.add_first_name(first_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<PeopleRecord> CreatePeopleRecordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *first_name = nullptr,
    const char *last_name = nullptr) {
  return UIStorage::CreatePeopleRecord(
      _fbb,
      first_name ? _fbb.CreateString(first_name) : 0,
      last_name ? _fbb.CreateString(last_name) : 0);
}

inline const UIStorage::PeopleRecord *GetPeopleRecord(const void *buf) {
  return flatbuffers::GetRoot<UIStorage::PeopleRecord>(buf);
}

inline const UIStorage::PeopleRecord *GetSizePrefixedPeopleRecord(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<UIStorage::PeopleRecord>(buf);
}

inline bool VerifyPeopleRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<UIStorage::PeopleRecord>(nullptr);
}

inline bool VerifySizePrefixedPeopleRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<UIStorage::PeopleRecord>(nullptr);
}

inline void FinishPeopleRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<UIStorage::PeopleRecord> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPeopleRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<UIStorage::PeopleRecord> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace UIStorage

#endif  // FLATBUFFERS_GENERATED_PEOPLE_UISTORAGE_H_
